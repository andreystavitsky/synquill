// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by synquill aggregate_builder

part of 'database.generated.dart';

/// Drift table definition for Post entities
/// 
/// This table stores Post data with automatic sync metadata
/// and supports offline storage with eventual consistency.
@TableIndex(name: 'idx_posts_userId', columns: {#userId})
@UseRowClass(Post, constructor: 'fromDb')
class PostTable extends Table {
  @override
  String get tableName => 'posts';

  /// id column for Post
  TextColumn get id => text().named('id')();
  /// title column for Post
  TextColumn get title => text()();
  /// body column for Post
  TextColumn get body => text()();
  /// userId column for Post
  TextColumn get userId => text()();
  /// lastSyncedAt column for Post
  DateTimeColumn get lastSyncedAt => dateTime().nullable()();
  /// createdAt column for Post
  DateTimeColumn get createdAt => dateTime().nullable()();
  /// updatedAt column for Post
  DateTimeColumn get updatedAt => dateTime().nullable()();
  /// syncStatus column for Post
  TextColumn get syncStatus => text().nullable().withDefault(const Constant('synced')).map(const SyncStatusConverter())();

  @override
  Set<Column> get primaryKey => {id};
}


/// Drift table definition for LocalNote entities
/// 
/// This table stores LocalNote data with automatic sync metadata
/// and supports offline storage with eventual consistency.
@TableIndex(name: 'idx_local_notes_ownerId', columns: {#ownerId})
@UseRowClass(LocalNote, constructor: 'fromDb')
class LocalNoteTable extends Table {
  @override
  String get tableName => 'local_notes';

  /// id column for LocalNote
  TextColumn get id => text().named('id')();
  /// ownerId column for LocalNote
  TextColumn get ownerId => text()();
  /// content column for LocalNote
  TextColumn get content => text()();
  /// category column for LocalNote
  TextColumn get category => text().nullable()();
  /// lastSyncedAt column for LocalNote
  DateTimeColumn get lastSyncedAt => dateTime().nullable()();
  /// createdAt column for LocalNote
  DateTimeColumn get createdAt => dateTime().nullable()();
  /// updatedAt column for LocalNote
  DateTimeColumn get updatedAt => dateTime().nullable()();
  /// syncStatus column for LocalNote
  TextColumn get syncStatus => text().nullable().withDefault(const Constant('synced')).map(const SyncStatusConverter())();

  @override
  Set<Column> get primaryKey => {id};
}


/// Drift table definition for PlainModel entities
/// 
/// This table stores PlainModel data with automatic sync metadata
/// and supports offline storage with eventual consistency.
@UseRowClass(PlainModel, constructor: 'fromDb')
class PlainModelTable extends Table {
  @override
  String get tableName => 'plain_models';

  /// id column for PlainModel
  TextColumn get id => text().named('id')();
  /// name column for PlainModel
  TextColumn get name => text()();
  /// value column for PlainModel
  IntColumn get value => integer()();
  /// lastSyncedAt column for PlainModel
  DateTimeColumn get lastSyncedAt => dateTime().nullable()();
  /// createdAt column for PlainModel
  DateTimeColumn get createdAt => dateTime().nullable()();
  /// updatedAt column for PlainModel
  DateTimeColumn get updatedAt => dateTime().nullable()();
  /// syncStatus column for PlainModel
  TextColumn get syncStatus => text().nullable().withDefault(const Constant('synced')).map(const SyncStatusConverter())();

  @override
  Set<Column> get primaryKey => {id};
}


/// Drift table definition for User entities
/// 
/// This table stores User data with automatic sync metadata
/// and supports offline storage with eventual consistency.
@UseRowClass(User, constructor: 'fromDb')
class UserTable extends Table {
  @override
  String get tableName => 'users';

  /// id column for User
  TextColumn get id => text().named('id')();
  /// name column for User
  TextColumn get name => text()();
  /// lastSyncedAt column for User
  DateTimeColumn get lastSyncedAt => dateTime().nullable()();
  /// createdAt column for User
  DateTimeColumn get createdAt => dateTime().nullable()();
  /// updatedAt column for User
  DateTimeColumn get updatedAt => dateTime().nullable()();
  /// syncStatus column for User
  TextColumn get syncStatus => text().nullable().withDefault(const Constant('synced')).map(const SyncStatusConverter())();

  @override
  Set<Column> get primaryKey => {id};
}


/// Drift table definition for Todo entities
/// 
/// This table stores Todo data with automatic sync metadata
/// and supports offline storage with eventual consistency.
@TableIndex(name: 'idx_todos_userId', columns: {#userId})
@UseRowClass(Todo, constructor: 'fromDb')
class TodoTable extends Table {
  @override
  String get tableName => 'todos';

  /// title column for Todo
  TextColumn get title => text()();
  /// isCompleted column for Todo
  BoolColumn get isCompleted => boolean()();
  /// userId column for Todo
  TextColumn get userId => text()();
  /// id column for Todo
  TextColumn get id => text().named('id')();
  /// birthday column for Todo
  DateTimeColumn get birthday => dateTime().nullable()();
  /// fullName column for Todo
  TextColumn get fullName => text().nullable()();
  /// avatarUrl column for Todo
  TextColumn get avatarUrl => text().nullable()();
  /// phoneNumber column for Todo
  TextColumn get phoneNumber => text().nullable()();
  /// email column for Todo
  TextColumn get email => text().nullable()();
  /// fetchedAt column for Todo
  DateTimeColumn get fetchedAt => dateTime()();
  /// lastSyncedAt column for Todo
  DateTimeColumn get lastSyncedAt => dateTime().nullable()();
  /// createdAt column for Todo
  DateTimeColumn get createdAt => dateTime().nullable()();
  /// updatedAt column for Todo
  DateTimeColumn get updatedAt => dateTime().nullable()();
  /// syncStatus column for Todo
  TextColumn get syncStatus => text().nullable().withDefault(const Constant('synced')).map(const SyncStatusConverter())();

  @override
  Set<Column> get primaryKey => {id};
}


